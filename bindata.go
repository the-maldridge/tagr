// Code generated by go-bindata.
// sources:
// static/tmpl/list.tmpl
// static/tmpl/main.tmpl
// static/tmpl/plyr.tmpl
// static/tmpl/status.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticTmplListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x41\x6a\x03\x31\x0c\x45\xf7\x3e\xc5\x67\x98\x65\x3b\x26\xdb\xe0\x71\x77\x3d\x41\xe8\xde\x74\xe4\x8c\xa8\x2a\x97\x89\xa1\x14\xa1\xbb\x17\x07\xda\x68\x25\xe9\xf1\xe1\x7d\x33\x6c\x54\x59\x09\xd3\x7b\xd3\x4e\xda\x27\xb8\x87\xb4\x9f\xf2\x1b\x6f\xd4\x6e\xf8\xd0\xf6\xad\xe8\x0d\x97\x72\x3d\xce\x29\xee\xa7\x1c\x52\x93\x1c\x00\xb3\x67\x1c\x45\xaf\x84\x99\x9f\x30\x57\x9c\x57\x2c\xee\x01\x48\xc2\x39\x15\xec\x07\xd5\x75\x8a\x5f\x52\x7e\xe8\x78\xa9\x2c\xb4\x9a\xcd\x75\x79\x65\x21\x2d\x9f\xe4\x3e\x65\x33\xae\x98\xeb\x72\xe1\x2e\xe4\x7e\xe7\xff\x3b\xc9\xed\xef\xf7\xc8\x98\x91\x6e\xee\x29\x96\x9c\xa2\xf0\x30\x19\x33\x6c\xee\x20\xa4\x38\xfc\xcc\xc6\x39\xda\xfc\x06\x00\x00\xff\xff\xed\x64\x35\x31\xe5\x00\x00\x00")

func staticTmplListTmplBytes() ([]byte, error) {
	return bindataRead(
		_staticTmplListTmpl,
		"static/tmpl/list.tmpl",
	)
}

func staticTmplListTmpl() (*asset, error) {
	bytes, err := staticTmplListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/tmpl/list.tmpl", size: 229, mode: os.FileMode(420), modTime: time.Unix(1539971017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTmplMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xc1\x09\xc3\x30\x0c\x45\xef\x99\xe2\xe3\x01\xea\x05\x44\xa6\xe8\x02\x6e\xad\x36\x01\x47\x2e\xe5\xf7\x10\x44\x76\x2f\x89\x0e\xbe\x7d\xa1\xf7\x78\xee\xa8\xfa\x5a\x4d\x91\x5a\xd9\xfb\x8f\x09\xc7\x31\xc9\xc2\xad\xcd\x13\x00\xc8\xa2\xa5\xc6\xbc\x4e\xae\x6c\x3a\xdf\xcb\xfb\x2b\x39\x76\x60\x79\x70\xf2\xe8\x75\x1f\x8a\x3b\xa8\xdb\xa7\x15\x2a\xd2\xb3\x1b\xd5\x98\x70\x3b\x3b\x61\x06\x2e\x39\xa2\xee\x50\xab\xe7\xf7\x1f\x00\x00\xff\xff\xd2\xaf\x65\xc4\x9c\x00\x00\x00")

func staticTmplMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_staticTmplMainTmpl,
		"static/tmpl/main.tmpl",
	)
}

func staticTmplMainTmpl() (*asset, error) {
	bytes, err := staticTmplMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/tmpl/main.tmpl", size: 156, mode: os.FileMode(420), modTime: time.Unix(1539970996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTmplPlyrTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xdb\x36\x10\x7e\xd7\xaf\xb8\xf1\x45\x32\x90\x4a\xc1\xb0\x01\x5d\x2b\x69\x40\x9b\x74\xed\xd0\x36\xc3\xe2\x01\x7b\xa5\xc5\x93\xc2\x94\x26\x35\xf2\x94\xc4\x30\xfc\xdf\x87\xa3\xec\x59\x6e\xe2\x36\x7e\x9b\x9e\x08\xf2\xfb\xbe\x3b\x1e\x3f\x1e\xb5\x5e\x83\xc2\x56\x5b\x04\xd1\x38\x4b\x68\x49\xc0\x66\x93\x94\x12\x6e\x3c\xb6\x95\x28\x8c\x0e\x24\xea\x37\xb2\xf9\x02\xe4\xe0\xa3\x0e\x54\x16\xb2\x4e\xca\x85\x87\xa2\x4e\xca\x3b\xad\xd0\x01\x53\xbd\x33\xa1\x12\xbb\x91\x80\x7b\xad\xe8\xa6\x12\x2f\xcf\xcf\x45\x9d\x00\x94\xc1\x0d\xbe\x41\x08\xbe\xa9\x44\x11\x69\x2f\x5a\x6d\xb0\x58\xaf\xf3\xcd\x46\x00\xad\x7a\xac\x44\x9c\x2f\x96\xfd\x4f\x22\xaa\x8f\xb8\x3a\x29\x95\xbe\x03\xad\x2a\xb1\x44\x92\x0b\xf7\x30\x2a\xb6\xce\x2f\xe3\x6c\x87\x16\xbd\x34\x9f\x90\x64\x5c\x01\x28\x8d\x5c\xa0\xa9\xe7\x9a\x0c\xbe\x8a\x33\x00\xa5\xb6\xfd\x40\xdb\x40\x84\x0f\x24\x22\x99\x18\x13\xc3\x45\x50\x31\x32\xa7\x2a\x17\x92\xbe\x27\xa2\x24\x1d\xd3\x18\x0b\x35\x95\xc3\xd0\x78\xdd\x93\x76\xf6\xd5\x64\x15\xa0\x64\x3d\xe9\x51\x8e\x92\x7b\x98\x80\x26\x16\xf7\x97\x97\x02\xbc\xbb\x0f\x95\xf8\x59\x40\x5d\x16\x3b\xfc\xb3\xc2\xce\x65\x17\xbe\x57\x0a\xd9\x85\xa7\x76\x51\x16\x5c\xea\x38\x5a\x0c\x44\xce\x82\xb3\x6f\x8d\x6e\xbe\x54\x22\xa0\x55\xef\x9c\x5f\x66\x33\x51\xff\xd5\x73\x19\xca\x62\xc4\xf0\xf1\x29\x7d\x57\x27\xe5\xb8\x0f\xa6\xb7\x83\x6d\x78\x43\x30\x44\xe8\x48\x84\xf5\x36\xab\x87\x1b\x0f\x15\x58\xbc\x87\xbf\x3f\x7d\x7c\x4f\xd4\xff\x89\xff\x0c\x18\x28\x9b\xbd\xde\x23\x72\x8f\xa1\x77\x36\xe0\x7c\xd5\x23\x54\x90\xde\x06\x67\xd3\x29\xc0\x59\x8f\x52\xad\x02\x49\xc2\xe6\x46\xda\x8e\x61\xbb\xc8\x93\x70\xfc\xe9\x16\xb2\x51\x54\xaa\xd5\x35\x33\xa0\xaa\xaa\xaf\xe2\xe7\x17\x57\x9f\x2f\x0f\x79\x53\x2e\x07\x1a\x42\xe4\xfd\x78\x7e\xfe\x18\xc7\x9f\x72\xcd\xb0\x44\x4b\x79\x87\x74\x69\x90\x87\x6f\x56\x1f\x54\x96\x46\xf7\xa5\xb3\xfc\x4e\x9a\x81\xf3\x9c\xee\x30\x8f\xf6\x7d\x7d\x8a\x1c\x57\xf5\x98\x1a\xdb\xf8\x34\xb1\xbd\x03\x8f\x6a\xee\x21\x27\x49\xb3\xd3\x8e\xee\x5a\x76\x21\xbf\x75\xda\xee\xcf\x7d\xf7\x6d\x00\x4d\xc0\x27\x2b\x2c\x0d\x7a\xca\xd2\xb7\x6e\x30\x0a\xac\x23\x70\x0b\x92\xda\x02\xf7\x18\xe0\xb6\xa1\x24\xc9\x3c\x7d\x2c\x99\x3c\x1e\x6f\xa6\x6e\xea\xd1\x66\xe9\x6f\x97\xf3\xf4\x0c\xd2\x42\xdb\xd6\xfd\xca\x92\x55\x6c\x5b\xe9\x6c\x82\xe4\xab\x90\xf1\x04\xd3\xa7\x66\xdf\xdf\x91\xff\x32\xe7\x64\xb6\x5e\xbf\x5a\xdc\x62\x33\xf1\x78\xcc\xf3\x9d\x36\x68\xe5\x92\x6b\x23\xc6\x06\x79\xb0\x1c\x8d\x01\xd5\x33\x6d\x75\x40\xbd\x88\x1e\x7f\x9e\x83\x0e\x89\xfb\xa3\xfe\x26\xff\xb1\x69\x0e\x53\x97\x5d\xf8\x66\xe6\x13\x67\xe4\xa1\x37\x9a\xb2\xf4\x6c\x7f\x6c\x8d\xb3\xc1\x19\xcc\x8d\xeb\x32\xd6\x9b\xb6\x86\x67\x34\x8f\x78\x9a\xe2\x8f\xab\xeb\xb9\x38\x03\x51\x8c\x6d\x68\x72\xa0\xe2\x0c\xc8\x0f\x78\xc0\x09\x48\x5b\xad\xf7\x28\x15\x7a\x36\x59\x7c\x29\x5f\x70\x0b\x62\x5b\xc8\xbe\x37\xba\x91\xbc\xe7\x22\xb6\xa3\xaf\xf8\x56\x65\xbf\x5f\x5f\x7d\xce\x03\x79\x6d\x3b\xdd\xae\xc6\xd4\x67\xff\xf7\xae\x35\x2d\xb6\x18\xbb\x3b\x5c\x0f\x4d\x83\x21\xb4\x83\x11\xa7\x5f\x4f\xf1\xc1\xf2\x4b\x12\x2b\x05\x5b\xc1\x56\x6a\x83\xea\x87\x27\xd4\x8e\xdc\xcc\x4d\x92\xc0\xc1\x03\x92\x94\xc5\xee\x89\x59\xaf\x01\xad\xe2\x3f\x98\x7f\x03\x00\x00\xff\xff\xc5\x97\x39\xf9\xd9\x08\x00\x00")

func staticTmplPlyrTmplBytes() ([]byte, error) {
	return bindataRead(
		_staticTmplPlyrTmpl,
		"static/tmpl/plyr.tmpl",
	)
}

func staticTmplPlyrTmpl() (*asset, error) {
	bytes, err := staticTmplPlyrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/tmpl/plyr.tmpl", size: 2265, mode: os.FileMode(420), modTime: time.Unix(1539971285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTmplStatusTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x31\x0a\x42\x31\x0c\x80\xe1\x3d\xa7\xc8\xd0\x51\x7b\x80\x82\x9b\x38\x39\x38\x88\xab\x54\x1b\x4b\xe0\x99\x4a\x5e\x2d\x3c\x42\xee\x2e\x76\xfd\x7f\xbe\x6b\xae\x8a\xbc\xa2\x7e\x45\x58\x2a\x7c\x9a\xf6\x84\x66\xf1\xd2\xb4\xbb\xc3\xe0\x42\xed\x5e\x58\xe9\xd9\x9b\x6e\x73\xdd\xfe\xed\xc8\xea\x0e\x2f\x5e\x68\x4d\x60\xb6\x47\xcd\x52\x09\x03\xef\x30\x0c\x4c\x07\x8c\x67\x7e\x68\xd6\xcd\x1d\x10\xcd\xc2\x88\x27\x5e\x48\xf2\x9b\xdc\x27\x20\x29\xee\xf0\x0b\x00\x00\xff\xff\x9c\x81\xc0\xab\x81\x00\x00\x00")

func staticTmplStatusTmplBytes() ([]byte, error) {
	return bindataRead(
		_staticTmplStatusTmpl,
		"static/tmpl/status.tmpl",
	)
}

func staticTmplStatusTmpl() (*asset, error) {
	bytes, err := staticTmplStatusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/tmpl/status.tmpl", size: 129, mode: os.FileMode(420), modTime: time.Unix(1539969387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/tmpl/list.tmpl": staticTmplListTmpl,
	"static/tmpl/main.tmpl": staticTmplMainTmpl,
	"static/tmpl/plyr.tmpl": staticTmplPlyrTmpl,
	"static/tmpl/status.tmpl": staticTmplStatusTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"list.tmpl": &bintree{staticTmplListTmpl, map[string]*bintree{}},
			"main.tmpl": &bintree{staticTmplMainTmpl, map[string]*bintree{}},
			"plyr.tmpl": &bintree{staticTmplPlyrTmpl, map[string]*bintree{}},
			"status.tmpl": &bintree{staticTmplStatusTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

